
#+TITLE: Hierarchical Version Hashing System Design
#+AUTHOR: Nithin Mani
#+DATE: [2024-07-09 Tue]


* Versioning and branches illustration



[[file:./branches.png]]



* Overview

This system generates unique, deterministic hashes for version numbers across different branches in a hierarchical structure. It uses SipHash-2-4 as the hashing algorithm and represents the final hash in base64 format. The system includes detailed information about parent branches.

** Illustration of Version and Branch Hierarchy (Ubuntu-style with Sequential Versioning)

#+BEGIN_SRC ascii
jammy (main)
|
|-- v1 (hash: Tz7m1cznF9E=)
|
|-- v2 (hash: X3kP2qnvGfA=)
|   |
|   +-- kinetic
|   |   |
|   |   |-- v1 (hash: Y5bQ3rnwHgB=)
|   |   |
|   |   |-- v2 (hash: Z7dS4tnxIhC=)
|   |   |
|   |   +-- v3 (hash: A9fU5vnzJiD=)
|   |
|   +-- lunar
|       |
|       +-- v1 (hash: B1hW6xn0KjE=)
|
|-- v3 (hash: C3jY7zn1LkF=)
|
|-- v4 (hash: D5lA8Bn2MlG=)
    |
    +-- mantic
        |
        |-- v1 (hash: E7nC9Dn3NmH=)
        |
        +-- v2 (hash: F9pE0Fn4OnI=)
            |
            +-- noble
                |
                +-- v1 (hash: G1rG1Hn5PnJ=)
#+END_SRC

** Example Branch and Version Details

*** Jammy (Main Branch)
- v1: ~Tz7m1cznF9E=~
- v2: ~X3kP2qnvGfA=~
- v3: ~C3jY7zn1LkF=~
- v4: ~D5lA8Bn2MlG=~

*** Kinetic
- Parent: Jammy v2
- v1: ~Y5bQ3rnwHgB=~
- v2: ~Z7dS4tnxIhC=~
- v3: ~A9fU5vnzJiD=~

*** Lunar
- Parent: Jammy v2
- v1: ~B1hW6xn0KjE=~

*** Mantic
- Parent: Jammy v4
- v1: ~E7nC9Dn3NmH=~
- v2: ~F9pE0Fn4OnI=~

*** Noble
- Parent: Mantic v2
- v1: ~G1rG1Hn5PnJ=~

* Core Components

** VersionHash

A structure to represent a version hash:

#+BEGIN_SRC rust :tangle yes
struct VersionHash {
    branch: String,
    version: u64,
    hash: String,
}
#+END_SRC

** BranchInfo

A structure to hold detailed information about a branch:

#+BEGIN_SRC rust :tangle yes
struct BranchInfo {
    current_hash: String,
    parent_branch: String,
    parent_hash: String,
    parent_version: u64,
}
#+END_SRC

** VersionHasher

The main struct responsible for generating and managing hashes:

#+BEGIN_SRC rust :tangle yes
use std::collections::HashMap;

struct VersionHasher {
    branches: HashMap<String, BranchInfo>,
}

impl VersionHasher {
    fn new() -> Self {
        let mut branches = HashMap::new();
        branches.insert("main".to_string(), BranchInfo {
            current_hash: String::new(),
            parent_branch: String::new(),
            parent_hash: String::new(),
            parent_version: 0,
        });
        Self { branches }
    }

    fn generate_hash(&mut self, branch: &str, version: u64, parent_branch: Option<&str>, parent_version: Option<u64>) -> VersionHash {
        // Implementation details below
    }
}
#+END_SRC

* Hash Generation Algorithm

The ~generate_hash~ function is the core of the system:

#+BEGIN_SRC rust :tangle yes
fn generate_hash(&mut self, branch: &str, version: u64, parent_branch: Option<&str>, parent_version: Option<u64>) -> VersionHash {
    let (parent_hash, parent_branch, parent_version) = if let Some(branch_info) = self.branches.get(branch) {
        (
            branch_info.current_hash.clone(),
            branch_info.parent_branch.clone(),
            branch_info.parent_version,
        )
    } else {
        let parent_branch = parent_branch.unwrap_or("main").to_string();
        let parent_info = self.branches.get(&parent_branch).unwrap();
        (
            parent_info.current_hash.clone(),
            parent_branch,
            parent_version.unwrap_or(0),
        )
    };

    let input = format!("{}{}{}", parent_hash, branch, version);

    let mut hasher = SipHasher24::new();
    hasher.write(input.as_bytes());
    let hash = hasher.finish();

    let hash_base64 = general_purpose::STANDARD.encode(hash.to_be_bytes());
    
    self.branches.insert(branch.to_string(), BranchInfo {
        current_hash: hash_base64.clone(),
        parent_branch,
        parent_hash,
        parent_version,
    });

    VersionHash {
        branch: branch.to_string(),
        version,
        hash: hash_base64,
    }
}
#+END_SRC

* Key Processes

** Hash Generation

1. Check if the branch exists in the branches map.
2. If it's a new branch:
   - Use the provided parent branch (default to "main" if not provided).
   - Retrieve the parent branch's information.
3. If it's an existing branch:
   - Use the branch's own information as the parent info.
4. Concatenate the parent hash, branch name, and version number.
5. Create a new SipHasher24 instance.
6. Write the concatenated input to the hasher.
7. Finalize the hash.
8. Encode the resulting hash in base64 format.
9. Store the new BranchInfo in the branches map for future reference.
10. Return a VersionHash object with the branch, version, and hash.

** Branch Management

- The "main" branch is implicitly created with empty parent information.
- New branches store their parent branch information when created.
- The system supports creating branches at any level of the hierarchy.

* Data Structures

** Branches HashMap

- Key: Branch name (String)
- Value: BranchInfo structure

This structure allows quick lookup of branch information, including parent details, when generating new hashes for child branches or new versions of existing branches.

* External Dependencies

1. SipHash-2-4 implementation (siphash crate)
2. Base64 encoding library (base64 crate)

* Usage Example

#+BEGIN_SRC rust
fn main() {
    let mut hasher = VersionHasher::new();

    // Generate hashes for main branch
    let main_v1 = hasher.generate_hash("main", 1, None, None);
    let main_v2 = hasher.generate_hash("main", 2, None, None);

    // Generate hashes for a feature branch
    let feature_v1 = hasher.generate_hash("feature/new-ui", 1, Some("main"), Some(2));
    let feature_v2 = hasher.generate_hash("feature/new-ui", 2, None, None);

    // Generate hash for a bugfix branch
    let bugfix_v1 = hasher.generate_hash("bugfix/critical", 1, Some("feature/new-ui"), Some(1));

    println!("Main branch v1: {}", main_v1.hash);
    println!("Feature branch v2: {}", feature_v2.hash);
    println!("Bugfix branch v1: {}", bugfix_v1.hash);
}
#+END_SRC

* Considerations and Constraints

1. The system assumes that version numbers are consecutive integers within each branch.
2. Branch names should be unique across the entire hierarchy.
3. The system now stores parent branch information, allowing for better tracking of the branch hierarchy.
4. The hash generation is deterministic, ensuring consistency across different runs or systems.
5. When creating a new branch, the parent branch and version must be provided.

* Potential Enhancements

1. Implement branch merging logic.
2. Add support for non-consecutive version numbers.
3. Implement a caching mechanism for frequently accessed hashes.
4. Add functionality to reconstruct the full branch hierarchy from the stored information.
5. Implement validation to ensure parent branch exists when creating a new branch.
