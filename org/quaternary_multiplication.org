
* Quaternary Multiplication Using Bitwise Operations

* Binary Multiplication of 2-bit Numbers

** Introduction
This document describes the process of performing binary multiplication of two 2-bit numbers. It highlights the steps involved, including calculating partial products and summing them, taking into account the necessary bit positions and carries.

** Problem Statement
Given two 2-bit binary numbers, we need to multiply them using bitwise operations and properly align and sum the partial products.

** Representation
Letâ€™s denote the two 2-bit numbers as ~a~ and ~b~, where:
- ~a = a_1a_0~ (with ~a1~ and ~a0~ being the MSB and LSB of ~a~, respectively)
- ~b = b_1b_0~ (with ~b1~ and ~b0~ being the MSB and LSB of ~b~, respectively)

** Steps for Multiplication
1. Extract the bits from each 2-bit number.
2. Compute the partial products using bitwise AND operations.
3. Align the partial products according to their bit positions.
4. Sum the aligned partial products to produce the final result.

** Detailed Steps

1. Extract the Bits:
   - ~a0 = a & 0b01~
   - ~a1 = (a >> 1) & 0b01~
   - ~b0 = b & 0b01~
   - ~b1 = (b >> 1) & 0b01~

2. Calculate Partial Products:

   #+tblname: partial-products
   |       | b1 | b0 |
   |-------+----+----|
   | a1    | a1b1 | a1b0 |
   | a0    | a0b1 | a0b0 |

3. Align Partial Products:

   #+tblname: aligned-products
   |      |      | a1b1 | a1b0 |
   |------+------+------+------|
   | a0b1 | a0b0 |      |      |

4. Sum Partial Products:
   \[
   a_1b_1 \cdot 2^2 + (a_1b_0 + a_0b_1) \cdot 2^1 + a_0b_0 \cdot 2^0
   \]

** Result
By summing the aligned partial products, the final result of the binary multiplication is obtained. This process involves careful alignment and addition to ensure that all carries are appropriately handled.

